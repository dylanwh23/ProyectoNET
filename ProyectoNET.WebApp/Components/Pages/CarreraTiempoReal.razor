@page "/carrera-tiempo-real"
@using Microsoft.AspNetCore.SignalR.Client
@layout Layout

<h3>📊 Seguimiento en tiempo real</h3>

@if (hubConnection is not null)
{
    <p style="color:green">✅ Conectado al servidor SignalR.</p>
    <p>⏱️ Tiempo en ejecución: @elapsedSeconds segundos</p>
}
else
{
    <p style="color:red">❌ No conectado al servidor.</p>
}

<table class="table table-dark table-striped mt-3">
    <thead>
        <tr>
            <th>Carrera</th>
            <th>Corredor</th>
            <th>Checkpoint</th>
            <th>Velocidad (km/h)</th>
            <th>Tramos completados</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in carreraData)
        {
            <tr>
                <td>@item.CarreraId</td>
                <td>@item.CorredorId</td>
                <td>@item.Checkpoint</td>
                <td>@item.Velocidad</td>
                <td>@item.TramosCompletados</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private HubConnection? hubConnection;
    private int elapsedSeconds = 0;
    private List<CarreraData> carreraData = new();
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7252/carreraHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<CarreraData>("RecibirProgreso", data =>
        {
            var existing = carreraData.FirstOrDefault(x => x.CorredorId == data.CorredorId);
            if (existing != null)
            {
                existing.Checkpoint = data.Checkpoint;
                existing.Velocidad = data.Velocidad;
                existing.TramosCompletados = data.TramosCompletados;
            }
            else
            {
                carreraData.Add(data);
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        Console.WriteLine("✅ Conectado a SignalR");

        // ✅ Iniciar el temporizador en el hilo correcto
        timer = new Timer(async _ =>
        {
            elapsedSeconds++;
            await InvokeAsync(StateHasChanged);
        }, null, 1000, 1000);
    }

    public void Dispose()
    {
        timer?.Dispose();
        _ = hubConnection?.DisposeAsync();
    }

    public class CarreraData
    {
        public int CarreraId { get; set; }
        public int CorredorId { get; set; }
        public string Checkpoint { get; set; } = string.Empty;
        public double Velocidad { get; set; }
        public int TramosCompletados { get; set; }
    }
}

