@page "/carreras-en-curso/{CarreraId:int}"
@layout Layout

<div class="container mt-4">
    <h3 class="mb-3">📊 Seguimiento de Carrera @CarreraId en Tiempo Real (C# SignalR)</h3>

    <!-- Estado de conexión -->
    <div class="card p-3 mb-4">
        <p id="estado-conexion" class="text-info mb-0">✅ Conectando al servidor SignalR...</p>
    </div>

    <!-- Tabla de datos -->
    <table id="tabla-carreras" class="table table-dark table-striped table-hover mt-3 rounded-3 overflow-hidden">
        <thead>
            <tr>
                <th>Carrera</th>
                <th>Corredor</th>
                <th>Checkpoint</th>
                <th>Velocidad (km/h)</th>
                <th>Tramos completados</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="5" class="text-center text-muted">Esperando datos de simulación...</td>
            </tr>
        </tbody>
    </table>

    <!-- Dashboard visual: barra de progreso -->
    <div class="mt-4">
        <h5>Progreso visual de la carrera</h5>
        <div id="carrera-graficos"></div>
    </div>

    <!-- Caminito de checkpoints -->
    <div class="mt-4">
        <h5>📍 Camino de checkpoints</h5>
        <div id="camino-checkpoints" class="position-relative border rounded p-3" style="height:120px; background:#f8f9fa;"></div>
    </div>

    <!-- Logs -->
    <div class="mt-3">
        <h5>Logs en tiempo real</h5>
        <div id="logs" class="border p-2" style="height:250px; overflow:auto; background:#f8f9fa;">
            <div class="text-muted">Esperando logs...</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int CarreraId { get; set; }
}

<script type="module">
import { CarreraHubClient } from './js/CarreraHubClient.js';

const carreraId = @CarreraId;

const tabla = document.querySelector("#tabla-carreras tbody");
const grafDiv = document.querySelector("#carrera-graficos");
const caminoContainer = document.querySelector("#camino-checkpoints");
const logDiv = document.querySelector("#logs");
const estadoDiv = document.querySelector("#estado-conexion");

// ---------- Funciones UI ----------
function addLog(msg) {
    console.log(msg);
    const div = document.createElement("div");
    div.textContent = msg;
    logDiv.appendChild(div);
    logDiv.scrollTop = logDiv.scrollHeight;
    if (logDiv.children.length > 100) logDiv.removeChild(logDiv.firstChild);
}

function actualizarTabla(data) {
    let row = tabla.querySelector(`[data-corredor='${data.corredorId}']`);
    if (!row) {
        row = document.createElement("tr");
        row.dataset.corredor = data.corredorId;
        row.innerHTML = `
            <td>${data.carreraId}</td>
            <td>${data.corredorId}</td>
            <td>${data.checkpoint}</td>
            <td>${data.velocidad.toFixed(2)}</td>
            <td>${data.tramosCompletados}</td>
        `;
        tabla.appendChild(row);
    } else {
        const cells = row.children;
        cells[2].textContent = data.checkpoint;
        cells[3].textContent = data.velocidad.toFixed(2);
        cells[4].textContent = data.tramosCompletados;
    }
}

function actualizarGrafico(data) {
    let row = grafDiv.querySelector(`#corredor-${data.corredorId}`);
    if (!row) {
        row = document.createElement("div");
        row.id = `corredor-${data.corredorId}`;
        row.className = "mb-2";
        row.innerHTML = `
            <div class="d-flex justify-content-between">
                <span>Corredor ${data.corredorId}</span>
                <span>${data.tramosCompletados}</span>
            </div>
            <div class="progress">
                <div class="progress-bar bg-success" role="progressbar" style="width:0%" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        `;
        grafDiv.appendChild(row);
    }
    const progress = row.querySelector(".progress-bar");
    const porcentaje = Math.min((data.tramosCompletados / 10) * 100, 100);
    progress.style.width = porcentaje + "%";
    progress.textContent = `${porcentaje.toFixed(0)}%`;
    row.querySelector("div span:last-child").textContent = data.tramosCompletados;
}

function renderCheckpointDynamic(checkpoint) {
    let cpDiv = caminoContainer.querySelector(`.checkpoint[data-nombre='${checkpoint}']`);
    if (!cpDiv) {
        cpDiv = document.createElement("div");
        cpDiv.className = "checkpoint position-absolute text-center";
        cpDiv.dataset.nombre = checkpoint;

        const total = caminoContainer.querySelectorAll(".checkpoint").length + 1;
        cpDiv.style.left = `${(total - 1) * 18}%`;
        cpDiv.style.bottom = "10px";
        cpDiv.innerHTML = `<strong>${checkpoint}</strong><div class="corredores"></div>`;
        caminoContainer.appendChild(cpDiv);
    }
    return cpDiv;
}

function actualizarCamino(data) {
    // quitar de todos
    caminoContainer.querySelectorAll(".checkpoint .corredores").forEach(div => {
        const c = div.querySelector(`[data-corredor='${data.corredorId}']`);
        if (c) div.removeChild(c);
    });

    const cpDiv = renderCheckpointDynamic(data.checkpoint);
    const corredoresDiv = cpDiv.querySelector(".corredores");

    const corredorDiv = document.createElement("div");
    corredorDiv.textContent = `Corredor ${data.corredorId}`;
    corredorDiv.dataset.corredor = data.corredorId;
    corredorDiv.className = "corredor-punto small bg-info text-white rounded px-1 my-1 d-inline-block";
    corredoresDiv.appendChild(corredorDiv);
}

// ---------- Inicializar cliente con callbacks ----------
const client = new CarreraHubClient(carreraId);

// Callback para progreso
client.onProgreso = (data) => {
    actualizarTabla(data);
    actualizarGrafico(data);
    actualizarCamino(data);
};

// Callback para logs
client.onLog = (msg) => addLog(msg);

// Callback opcional para reconexión
client.onReconnect = (id) => addLog(`Reconectado: ${id}`);

// Callback opcional para cierre
client.onClose = (err) => addLog(`Conexión cerrada: ${err?.message}`);

client.start();
</script>
